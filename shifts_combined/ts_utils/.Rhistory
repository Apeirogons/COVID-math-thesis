#! /usr/bin/Rscript
library('ggplot2')
library('EpiEstim')
source('ts_utils/rl_cobey.R')
# SEIR
dist_to_infectious = read.csv('incubation_period.csv')
seir = read.csv('data/process_noise_SEIR.csv')
rls = get_RL(seir$obs_symptomatic_incidence, seir$t, dist_to_infectious$seir, max_iter=50, regularize=0.03)
rls=rls[rls['time'] >=0,]
seir$rl_deconv = rls$RL_result
plot = ggplot(seir) + geom_line(aes(x=X, y=obs_symptomatic_incidence, color='symptomatic incidence'))+ geom_line(aes(x=X, y=rl_deconv, color='deconvolved incidence')) + geom_line(aes(x=X, y=scaled_true_incidence, color='true incidence'))
print(plot)
ggsave(paste(paste('figures/', 'seir iterative RL', sep=''), '.png', sep=''))
write.csv(seir, 'data/process_noise_SEIR.csv', row.names = FALSE)
# Real
for (country in c('Canada', 'United States', 'United Kingdom', 'Japan', 'Germany', 'France')){
data = read.csv(paste(paste('data/', country, sep=''), '.csv', sep=''))
# Deconvolution step
rls = get_RL(data$new_cases_per_million, c(1:length(data$date)), dist_to_infectious$`real_world`, max_iter=50, regularize=0.1, right_censor=TRUE)
deconv_results = as.data.frame(rls)
deconv_results = deconv_results[deconv_results['time'] >= 1,]
deconv_results$date = as.Date(data$date)
deconv_results$original = data$new_cases_per_million
plot = ggplot(deconv_results) + geom_line(aes(x=date, y=original, color='original'))+ geom_line(aes(x=date, y=RL_result, color='deconvolved'))
print(plot)
ggsave(paste(paste('figures/', country, sep=''), '.png', sep=''))
data$rl_deconv = deconv_results$RL_result
write.csv(data, paste(paste('data/', country, sep=''), '.csv', sep=''))
}
#! /usr/bin/Rscript
library('deSolve')
library('extraDistr')
library('EpiEstim')
library('poweRlaw')
library('data.table')
library('ggthemes')
library('ggplot2')
source('ts_utils/process_utils.R')
source('ts_utils/process_noise_simulation.R')
source('ts_utils/deterministic_simulation.R')
##################################################################################
# Simulation parameters
t = c(-1:401)
b = function(t, MU){
if (t< 150){
z=2.1
}
else if (t < 200){
z=0.99
}
else if (t < 300){
z=0.9
}
else{
z=1.2
}
return(z*MU)
}
# Periodic detection parameters
detection_prob = 0.8
detection_consts = c(1, 1.2, 1.2, 1, 1, 1, 1)
temp = get_detection_pdfs(detection_prob, detection_consts, infectious_pdf, incubation_pdf, detection_pdf)
# Incubation/Infection/Detection distribution parameters
# https://jamanetwork.com/journals/jamanetworkopen/fullarticle/2774707
indices = c(0:50)
# Real-world incubation period (E->I distribution)
inc = dislnorm$new()
inc$setPars(c(1.63, 0.5))
# Infectious period = recovery time
inf = disexp$new()
inf$setPars(c(1/10))
# Detection distribution
det = dislnorm$new()
det$setPars(c(1.7, 0.5))
#####################################################################################################
# Parse parameters
inc$setXmin(0)
incubation_pdf = dist_pdf(inc, q=indices)
incubation_pdf = incubation_pdf/sum(incubation_pdf)
inf$setXmin(0)
infectious_pdf = dist_pdf(inf, q=indices)
infectious_pdf = infectious_pdf/sum(infectious_pdf)
det$setXmin(0)
detection_pdf = dist_pdf(det, q=indices)
detection_pdf = detection_pdf/sum(detection_pdf)
temp = get_detection_pdfs(detection_prob, detection_consts, infectious_pdf, incubation_pdf, detection_pdf)
periodized_detections = temp$periodized_detections
p_greaters = temp$p_greaters
cumulative_time_to_recovery = temp$cumulative_time_to_recovery
#df = data.frame(t=indices, incubation=incubation_pdf, infectious = infectious_pdf)
#write.csv(df, 'incubation_and_infectious.csv')
########################################################################################3
# Create file path
file_path = 'seir'
dir.create(file.path(file_path), showWarnings = FALSE)
df = simulate_deterministic(10000000, 10, b, t, incubation_pdf, infectious_pdf, periodized_detections, p_greaters, cumulative_time_to_recovery, detection_prob)
write.csv(df, 'seir/deterministic.csv')
print('Iteration 0: Deterministic')
ggplot(df) + geom_line(aes(x=t, y=expected_incidence, color='expected_incidence', alpha=0.5)) + geom_line(aes(x=t, y=obs_symptomatic_incidence, color='obs_symptomatic_incidence', alpha=0.5)) + scale_color_colorblind()
ggsave('deterministic_img.png')
#! /usr/bin/Rscript
library('deSolve')
library('extraDistr')
library('EpiEstim')
library('poweRlaw')
library('data.table')
library('ggthemes')
library('ggplot2')
source('ts_utils/process_utils.R')
source('ts_utils/process_noise_simulation.R')
source('ts_utils/deterministic_simulation.R')
##################################################################################
# Simulation parameters
t = c(-1:401)
b = function(t, MU){
if (t< 150){
z=2.1
}
else if (t < 200){
z=0.99
}
else if (t < 300){
z=0.9
}
else{
z=1.2
}
return(z*MU)
}
# Periodic detection parameters
detection_prob = 0.8
detection_consts = c(1, 1.2, 1.2, 1, 1, 1, 1)
temp = get_detection_pdfs(detection_prob, detection_consts, infectious_pdf, incubation_pdf, detection_pdf)
# Incubation/Infection/Detection distribution parameters
# https://jamanetwork.com/journals/jamanetworkopen/fullarticle/2774707
indices = c(0:50)
# Real-world incubation period (E->I distribution)
inc = dislnorm$new()
inc$setPars(c(1.63, 0.5))
# Infectious period = recovery time
inf = disexp$new()
inf$setPars(c(1/10))
# Detection distribution
det = dislnorm$new()
det$setPars(c(1.7, 0.5))
#####################################################################################################
# Parse parameters
inc$setXmin(0)
incubation_pdf = dist_pdf(inc, q=indices)
incubation_pdf = incubation_pdf/sum(incubation_pdf)
inf$setXmin(0)
infectious_pdf = dist_pdf(inf, q=indices)
infectious_pdf = infectious_pdf/sum(infectious_pdf)
det$setXmin(0)
detection_pdf = dist_pdf(det, q=indices)
detection_pdf = detection_pdf/sum(detection_pdf)
temp = get_detection_pdfs(detection_prob, detection_consts, infectious_pdf, incubation_pdf, detection_pdf)
periodized_detections = temp$periodized_detections
p_greaters = temp$p_greaters
cumulative_time_to_recovery = temp$cumulative_time_to_recovery
#df = data.frame(t=indices, incubation=incubation_pdf, infectious = infectious_pdf)
#write.csv(df, 'incubation_and_infectious.csv')
########################################################################################3
# Create file path
file_path = 'seir'
dir.create(file.path(file_path), showWarnings = FALSE)
df = simulate_deterministic(10000000, 10, b, t, incubation_pdf, infectious_pdf, periodized_detections, p_greaters, cumulative_time_to_recovery, detection_prob)
write.csv(df, 'seir/deterministic.csv')
print('Iteration 0: Deterministic')
ggplot(df) + geom_line(aes(x=t, y=expected_incidence, color='expected_incidence', alpha=0.5)) + geom_line(aes(x=t, y=obs_symptomatic_incidence, color='obs_symptomatic_incidence', alpha=0.5)) + scale_color_colorblind()
ggsave('deterministic_img.png')
df
#! /usr/bin/Rscript
library('deSolve')
library('extraDistr')
library('EpiEstim')
library('poweRlaw')
library('data.table')
library('ggthemes')
library('ggplot2')
source('ts_utils/process_utils.R')
source('ts_utils/process_noise_simulation.R')
source('ts_utils/deterministic_simulation.R')
##################################################################################
# Simulation parameters
t = c(-1:401)
b = function(t, MU){
if (t< 150){
z=2.1
}
else if (t < 200){
z=0.99
}
else if (t < 300){
z=0.9
}
else{
z=1.2
}
return(z*MU)
}
# Periodic detection parameters
detection_prob = 0.8
detection_consts = c(1, 1.2, 1.2, 1, 1, 1, 1)
temp = get_detection_pdfs(detection_prob, detection_consts, infectious_pdf, incubation_pdf, detection_pdf)
# Incubation/Infection/Detection distribution parameters
# https://jamanetwork.com/journals/jamanetworkopen/fullarticle/2774707
indices = c(0:50)
# Real-world incubation period (E->I distribution)
inc = dislnorm$new()
inc$setPars(c(1.63, 0.5))
# Infectious period = recovery time
inf = disexp$new()
inf$setPars(c(1/10))
# Detection distribution
det = dislnorm$new()
det$setPars(c(1.7, 0.5))
#####################################################################################################
# Parse parameters
inc$setXmin(0)
incubation_pdf = dist_pdf(inc, q=indices)
incubation_pdf = incubation_pdf/sum(incubation_pdf)
inf$setXmin(0)
infectious_pdf = dist_pdf(inf, q=indices)
infectious_pdf = infectious_pdf/sum(infectious_pdf)
det$setXmin(0)
detection_pdf = dist_pdf(det, q=indices)
detection_pdf = detection_pdf/sum(detection_pdf)
temp = get_detection_pdfs(detection_prob, detection_consts, infectious_pdf, incubation_pdf, detection_pdf)
periodized_detections = temp$periodized_detections
p_greaters = temp$p_greaters
cumulative_time_to_recovery = temp$cumulative_time_to_recovery
#df = data.frame(t=indices, incubation=incubation_pdf, infectious = infectious_pdf)
#write.csv(df, 'incubation_and_infectious.csv')
########################################################################################3
# Create file path
file_path = 'seir'
dir.create(file.path(file_path), showWarnings = FALSE)
df = simulate_deterministic(10000000, 10, b, t, incubation_pdf, infectious_pdf, periodized_detections, p_greaters, cumulative_time_to_recovery, detection_prob, noise='observation')
write.csv(df, 'seir/deterministic.csv')
print('Iteration 0: Deterministic')
